# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuakeDialog
                                 A QGIS plugin
 QQuake plugin to download seismologic data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Faunalia
        email                : matteo.ghetta@faunalia.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import re

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QWidget, QFileDialog
from qgis.PyQt.QtCore import pyqtSignal, QDir

from qgis.core import (
    QgsSettings
)

from qquake.gui.gui_utils import GuiUtils
from qquake.gui.output_table_options_dialog import OutputTableOptionsDialog
from qquake.services import SERVICE_MANAGER
from qquake.fetcher import Fetcher

FORM_CLASS, _ = uic.loadUiType(GuiUtils.get_ui_file_path('filter_by_id_widget_base.ui'))


class FilterByIdWidget(QWidget, FORM_CLASS):
    changed = pyqtSignal()

    def __init__(self, iface, service_type, parent=None):
        """Constructor."""
        super().__init__(parent)

        self.setupUi(self)

        self.radio_single_event.toggled.connect(self._enable_widgets)
        self.radio_multiple_events.toggled.connect(self._enable_widgets)
        self.radio_basic_output.toggled.connect(self._enable_widgets)
        self.radio_extended_output.toggled.connect(self._enable_widgets)

        self._enable_widgets()

        self.output_table_options_button.clicked.connect(self._output_table_options)

        self.service_type = None
        self.service_id = None
        self.set_service_type(service_type)
        self.output_fields = None

        self.radio_single_event.toggled.connect(self.changed)
        self.edit_event_id.textChanged.connect(self.changed)
        self.event_ids_edit.textChanged.connect(self.changed)
        self.radio_basic_output.toggled.connect(self.changed)
        self.radio_extended_output.toggled.connect(self.changed)
        self.button_import_from_file.clicked.connect(self.load_from_file)

    def set_service_type(self, service_type):
        self.service_type = service_type

    def set_service_id(self, service_id):
        self.service_id = service_id
        config = SERVICE_MANAGER.service_details(self.service_type, self.service_id)
        if 'fields' in config['default']:
            self.output_fields = config['default']['fields']

    def restore_settings(self, prefix):
        s = QgsSettings()
        self.edit_event_id.setText(s.value('/plugins/qquake/{}_single_event_id'.format(prefix), '', str))
        if s.value('/plugins/qquake/{}_single_event_checked'.format(prefix), True, bool):
            self.radio_single_event.setChecked(True)
        if s.value('/plugins/qquake/{}_multi_event_checked'.format(prefix), True, bool):
            self.radio_multiple_events.setChecked(True)
        self.radio_basic_output.setChecked(
            s.value('/plugins/qquake/{}_single_event_basic_checked'.format(prefix), True, bool))
        self.radio_extended_output.setChecked(
            s.value('/plugins/qquake/{}_single_event_extended_checked'.format(prefix), False, bool))

    def save_settings(self, prefix):
        s = QgsSettings()
        s.setValue('/plugins/qquake/{}_single_event_id'.format(prefix), self.edit_event_id.text())
        s.setValue('/plugins/qquake/{}_single_event_checked'.format(prefix), self.radio_single_event.isChecked())
        s.setValue('/plugins/qquake/{}_multi_event_checked'.format(prefix), self.radio_multiple_events.isChecked())
        s.setValue('/plugins/qquake/{}_single_event_basic_checked'.format(prefix), self.radio_basic_output.isChecked())
        s.setValue('/plugins/qquake/{}_single_event_extended_checked'.format(prefix), self.radio_extended_output.isChecked())

    def _enable_widgets(self):
        for w in [self.label_event_id,
                  self.edit_event_id]:
            w.setEnabled(self.radio_single_event.isChecked())

        for w in [self.multi_event_widget]:
            w.setEnabled(self.radio_multiple_events.isChecked())

        self.output_table_options_button.setEnabled(self.radio_extended_output.isChecked())

    def _output_table_options(self):
        dlg = OutputTableOptionsDialog(self.service_type, self.service_id, self.output_fields, self)
        if dlg.exec_():
            self.output_fields = dlg.selected_fields()
            self.changed.emit()

    def ids(self):
        if self.radio_multiple_events.isChecked():
            id_text = self.event_ids_edit.toPlainText()
            return self.parse_multi_input(id_text)
        else:
            return [self.edit_event_id.text()]

    @staticmethod
    def parse_multi_input(text):
        return [l.strip() for l in re.split(r'[,\n]', text) if l.strip()]

    def load_from_file(self):
        file, _ = QFileDialog.getOpenFileName(self, self.tr('Import Event IDs from File'), QDir.homePath(), 'Text Files (*.*)')
        if not file:
            return

        with open(file, 'rt') as f:
            text = '\n'.join(f.readlines())
            self.event_ids_edit.setPlainText('\n'.join(self.parse_multi_input(text)))

    def output_type(self):
        return Fetcher.BASIC if self.radio_basic_output.isChecked() else Fetcher.EXTENDED