# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuakeDialog
                                 A QGIS plugin
 QQuake plugin to download seismologic data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Faunalia
        email                : matteo.ghetta@faunalia.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QWidget

from qquake.services import SERVICE_MANAGER
from qquake.gui.gui_utils import GuiUtils

from qgis.core import QgsStringUtils

FORM_CLASS, _ = uic.loadUiType(GuiUtils.get_ui_file_path('service_information_widget.ui'))


class ServiceInformationWidget(QWidget, FORM_CLASS):

    def __init__(self, iface, parent=None):
        """Constructor."""
        super().__init__(parent)
        self.iface = iface
        self.setupUi(self)
        self.info_browser.viewport().setAutoFillBackground(False)

        self.layer_model = None
        self.service_type = None
        self.service_id = None
        self.service_config = None

    def set_service(self, service_id, service_type):
        self.service_type = service_type
        self.service_id = service_id
        self.service_config = SERVICE_MANAGER.service_details(service_type, service_id)

        html = f"""<p><b>Title</b><br>
        {self.service_config['title']}</p>"""

        if self.service_config.get('servicedescriptionurl') or self.service_config.get('servicedescription'):
            html+=f"""<p><b>Service description</b><br>
            <a href="{self.service_config['servicedescriptionurl']}">{self.service_config.get('servicedescription') or self.service_config['servicedescriptionurl']}</a></p>"""

        html += """<p><b>Service managed by</b><br>
            <a href="{dataproviderurl}">{dataprovider}</a></p>
            """.format(**self.service_config)

        if self.service_config.get('help'):
            html += """
            <p><b>Help</b><br>
            <a href="{help}">{help}</a></p>
            """.format(**self.service_config)

        if self.service_config.get('datadescription') or self.service_config.get('datadescriptionurl'):
            html += f"""<p><b>Data description</b><br>
                <a href="{self.service_config['datadescriptionurl']}">{self.service_config.get('datadescription') or self.service_config['datadescriptionurl']}</a></p>
                """

        if self.service_config.get('datalicenseurl') or self.service_config.get('datalicense'):
            html += f"""<p><b>Data license</b><br>
                <a href="{self.service_config['datalicenseurl']}">{self.service_config.get('datalicense') or self.service_config.get('datalicenseurl')}</a></p>
                """

        if self.service_config.get('publications'):
            html += f"""<p><b>Publications</b></p><ul>"""
            for p in self.service_config['publications']:
                html += f"""<li>{QgsStringUtils.insertLinks(p)[0]}</li>"""
            html += "</ul>"

        capabilities = []

        if service_type in (SERVICE_MANAGER.MACROSEISMIC, SERVICE_MANAGER.FDSNSTATION, SERVICE_MANAGER.FDSNEVENT):
            if self.service_config['settings'].get('querylimitmaxentries'):
                capabilities.append('Maximum entries returned: {}'.format(self.service_config['settings'].get('querylimitmaxentries')))
            if self.service_config.get('datestart'):
                capabilities.append(
                    'Earliest date: {}'.format(self.service_config['datestart']))
            if self.service_config.get('dateend'):
                capabilities.append(
                    'Latest date: {}'.format(self.service_config['dateend']))

        if capabilities:
            html += """<p><b>Capabilities</b>"""
            html += ''.join(['<li>{}</li>'.format(c) for c in capabilities])
            html += """</p>"""

        self.info_browser.setHtml(html)
