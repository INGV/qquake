# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuakeDialog
                                 A QGIS plugin
 QQuake plugin to download seismologic data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Faunalia
        email                : matteo.ghetta@faunalia.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import json

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QDialog
from qgis.PyQt.QtCore import (
    QModelIndex,
    Qt
)

from qgis.core import QgsSettings
from qgis.gui import QgsGui

from qquake.gui.gui_utils import GuiUtils
from qquake.gui.simple_node_model import SimpleNodeModel, ModelNode
from qquake.services import SERVICES

FORM_CLASS, _ = uic.loadUiType(GuiUtils.get_ui_file_path('output_table_options.ui'))

CONFIG_FIELDS_PATH = os.path.join(
    os.path.dirname(__file__),
    '..',
    'config',
    'config_fields_fsdnevent.json')

with open(CONFIG_FIELDS_PATH, 'r') as f:
    CONFIG_FIELDS = json.load(f)


class OutputTableOptionsDialog(QDialog, FORM_CLASS):

    def __init__(self, service_type, service_id, initial_fields, parent=None):
        """Constructor."""
        super().__init__(parent)
        self.setupUi(self)
        self.service_type = service_type
        self.service_id = service_id

        self.setWindowTitle(self.tr('Output Table Options'))

        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)

        QgsGui.enableAutoGeometryRestore(self)
        self.default_fields = None

        s = QgsSettings()

        nodes = []
        for key, settings in CONFIG_FIELDS['field_groups'].items():
            if self.service_type != 'fdsnstation' and settings['label'] == 'station':
                continue
            elif self.service_type == 'fdsnstation' and settings['label'] != 'station':
                continue

            parent_node = ModelNode([settings['label']])
            for f in settings['fields']:
                if f.get('skip'):
                    continue

                if f['source'].startswith('eventParameters'):
                    path = f['source'][len('eventParameters>event>'):]
                else:
                    path = f['source'][len('FDSNStationXML>Network>'):]

                if initial_fields:
                    checked = f['source'] in initial_fields
                else:
                    checked = s.value('/plugins/qquake/output_field_{}'.format(path.replace('>', '_')), True, bool)

                parent_node.addChild(
                    ModelNode(['checked', f['field'], path], checked, user_data=f['source']))
            nodes.append(parent_node)

        self.field_model = SimpleNodeModel(nodes, headers=[self.tr('Include'), self.tr('Field Name'),
                                                           self.tr('QuakeML Source')])
        self.fields_tree_view.setModel(self.field_model)
        self.fields_tree_view.expandAll()

        for r in range(self.field_model.rowCount(QModelIndex())):
            self.fields_tree_view.setFirstColumnSpanned(r, QModelIndex(), True)

        self.reset_fields_button.clicked.connect(self.reset_fields)
        self.check_all_button.clicked.connect(lambda: self._check_all(True))
        self.uncheck_all_button.clicked.connect(lambda: self._check_all(False))
        self.reset_fields_button.setVisible(False)

        if 'fields' in SERVICES[service_type][service_id]['default']:
            self.set_default_fields(SERVICES[service_type][service_id]['default']['fields'])

    def accept(self):
        s = QgsSettings()
        for r in range(self.field_model.rowCount(QModelIndex())):
            parent = self.field_model.index(r, 0, QModelIndex())
            for rc in range(self.field_model.rowCount(parent)):
                path = self.field_model.data(self.field_model.index(rc, 2, parent), Qt.DisplayRole)
                checked = self.field_model.data(self.field_model.index(rc, 0, parent), Qt.CheckStateRole)
                s.setValue('/plugins/qquake/output_field_{}'.format(path.replace('>', '_')), checked)

        super().accept()

    def selected_fields(self):
        fields = []
        for r in range(self.field_model.rowCount(QModelIndex())):
            parent = self.field_model.index(r, 0, QModelIndex())
            for rc in range(self.field_model.rowCount(parent)):
                path = self.field_model.data(self.field_model.index(rc, 2, parent), Qt.UserRole)
                checked = self.field_model.data(self.field_model.index(rc, 0, parent), Qt.CheckStateRole)
                if checked:
                    fields.append(path)
        return fields

    def reset_fields(self):
        if self.default_fields is None:
            return

        for r in range(self.field_model.rowCount(QModelIndex())):
            parent = self.field_model.index(r, 0, QModelIndex())
            for rc in range(self.field_model.rowCount(parent)):
                path = self.field_model.data(self.field_model.index(rc, 2, parent), Qt.UserRole)
                self.field_model.setData(self.field_model.index(rc, 0, parent), path in self.default_fields,
                                         Qt.CheckStateRole)

    def _check_all(self, checked=True):
        for r in range(self.field_model.rowCount(QModelIndex())):
            parent = self.field_model.index(r, 0, QModelIndex())
            for rc in range(self.field_model.rowCount(parent)):
                self.field_model.setData(self.field_model.index(rc, 0, parent), checked, Qt.CheckStateRole)

    def set_default_fields(self, fields):
        self.default_fields = fields
        self.reset_fields_button.setVisible(True)
