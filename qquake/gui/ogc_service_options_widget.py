# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuakeDialog
                                 A QGIS plugin
 QQuake plugin to download seismologic data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Faunalia
        email                : matteo.ghetta@faunalia.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QWidget
from qgis.PyQt.QtCore import QModelIndex, Qt

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsRasterLayer
)

from qquake.services import SERVICES
from qquake.gui.gui_utils import GuiUtils
from qquake.gui.simple_node_model import SimpleNodeModel, ModelNode

FORM_CLASS, _ = uic.loadUiType(GuiUtils.get_ui_file_path('ogc_service_widget.ui'))


class OgcServiceWidget(QWidget, FORM_CLASS):

    def __init__(self, iface, parent=None):
        """Constructor."""
        super().__init__(parent)
        self.iface = iface
        self.setupUi(self)

        self.layer_model = None
        self.service_type = None
        self.service_name = None
        self.service_config = None

        self.add_layers_button.clicked.connect(self._add_selected_layers)

    def set_service(self, service_name, service_type):
        self.service_type = service_type
        self.service_name = service_name
        self.service_config = SERVICES[service_type][service_name]
        layers = self.service_config['default']['layers']

        nodes = []
        for l in layers:
            if l['styles']:
                parent_node = ModelNode([l['layername']])
                for style in l['styles']:
                    checked = True
                    parent_node.addChild(
                        ModelNode(['checked', style], checked))
            else:
                parent_node = ModelNode(['checked', l['layername']], True)
            nodes.append(parent_node)

        self.layer_model = SimpleNodeModel(nodes, headers=[self.tr('Selected'), self.tr('Style Name')])
        self.layers_tree_view.setModel(self.layer_model)
        self.layers_tree_view.expandAll()

        for r in range(self.layer_model.rowCount(QModelIndex())):
            if self.layer_model.flags(self.layer_model.index(r, 0, QModelIndex())) & Qt.ItemIsUserCheckable:
                continue

            self.layers_tree_view.setFirstColumnSpanned(r, QModelIndex(), True)

    def _add_selected_layers(self):
        def add_layer(layer_name, style=None):
            if self.service_type == 'wfs':
                uri = "pagingEnabled='true' restrictToRequestBBOX='1' srsname='{}' typename='{}' url='{}' version='auto'".format(
                    self.service_config['srs'],
                    layer_name,
                    self.service_config['endpointurl'])
                vl = QgsVectorLayer(uri, layer_name, 'WFS')
                layers_to_add.append(vl)
            elif self.service_type == 'wms':
                if style:
                    uri = "contextualWMSLegend=0&crs={}&dpiMode=7&format=image/png&layers={}&styles={}&url={}".format(
                        self.service_config['srs'],
                        layer_name,
                        style,
                        self.service_config['endpointurl']
                    )
                else:
                    uri = "contextualWMSLegend=0&crs={}&dpiMode=7&format=image/png&layers={}&styles&url={}".format(
                        self.service_config['srs'],
                        layer_name,
                        self.service_config['endpointurl']
                    )
                rl = QgsRasterLayer(uri, layer_name, 'wms')
                layers_to_add.append(rl)

        layers_to_add = []
        for r in range(self.layer_model.rowCount(QModelIndex())):
            parent = self.layer_model.index(r, 0, QModelIndex())

            if self.layer_model.flags(parent) & Qt.ItemIsUserCheckable:
                layer_name = self.layer_model.data(self.layer_model.index(r, 1, QModelIndex()), Qt.DisplayRole)
                add_layer(layer_name)
            else:
                layer_name = self.layer_model.data(parent, Qt.DisplayRole)
                for rc in range(self.layer_model.rowCount(parent)):
                    style = self.layer_model.data(self.layer_model.index(rc, 1, parent), Qt.DisplayRole)
                    checked = self.layer_model.data(self.layer_model.index(rc, 0, parent), Qt.CheckStateRole)
                    if not checked:
                        continue
                    add_layer(layer_name, style)

        QgsProject.instance().addMapLayers(layers_to_add)
