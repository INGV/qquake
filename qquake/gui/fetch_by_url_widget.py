# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuake, a QGIS Plugin for Loading Seismological Data From Web Services

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : Istituto Nazionale di Geofisica e Vulcanologia (INGV)
        email                : mario.locati@ingv.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt import uic
from qgis.PyQt.QtCore import (
    pyqtSignal,
    QDir,
    QUrl
)
from qgis.PyQt.QtGui import QFontMetrics
from qgis.PyQt.QtWidgets import (
    QWidget,
    QFileDialog
)
from qgis.core import (
    QgsUnitTypes
)

from qquake.fetcher import Fetcher
from qquake.gui.gui_utils import GuiUtils
from qquake.gui.output_table_options_dialog import OutputTableOptionsDialog
from qquake.services import SERVICE_MANAGER

FORM_CLASS, _ = uic.loadUiType(GuiUtils.get_ui_file_path('fetch_by_url_widget.ui'))


class FetchByUrlWidget(QWidget, FORM_CLASS):
    """
    Fetch results by URL widget
    """
    changed = pyqtSignal()

    def __init__(self, iface,  # pylint: disable=unused-argument
                 service_type: str, parent=None):
        """Constructor."""
        super().__init__(parent)

        self.setupUi(self)

        fm = QFontMetrics(self.url_edit.font())
        self.url_edit.setMaximumHeight(fm.lineSpacing() * 6)

        self.output_table_options_button.clicked.connect(self._output_table_options)
        self.import_file_button.clicked.connect(self._import_from_file)

        if service_type == SERVICE_MANAGER.FDSNSTATION:
            self.label_import_file.setText(self.tr('Or import a local StationXML file'))

        self.service_type = None
        self.service_id = None
        self.set_service_type(service_type)
        self.output_fields = None
        self.service_config = {}

        self.url_edit.textChanged.connect(self.changed)

    def is_valid(self) -> bool:
        """
        Returns True if the widget state is valid
        """
        return bool(self.url_edit.toPlainText())

    def set_service_type(self, service_type: str):
        """
        Sets the associated service type
        """
        self.service_type = service_type

    def set_service_id(self, service_id: str):
        """
        Sets the associated service ID
        """
        self.service_id = service_id
        config = SERVICE_MANAGER.service_details(self.service_type, self.service_id)
        if 'fields' in config['default']:
            self.output_fields = config['default']['fields']

        self.service_config = SERVICE_MANAGER.service_details(self.service_type, self.service_id)

    def restore_settings(self, prefix: str):
        """
        Restores widget state from settings
        """

    def save_settings(self, prefix: str):
        """
        Saves widget state to settings
        """

    def _output_table_options(self):
        """
        Shows the output table options dialog
        """
        dlg = OutputTableOptionsDialog(self.service_type, self.service_id, self.output_fields, self)
        if dlg.exec_():
            self.output_fields = dlg.selected_fields()
            self.changed.emit()

    def _import_from_file(self):
        """
        Triggers importing QuakeML file
        """
        file, _ = QFileDialog.getOpenFileName(self, self.tr('Import QuakeML File'), QDir.homePath(), self.tr(
            'Supported Files (*.xml *.XML *.qml *.QML);;XML Files (*.xml *.XML);;QuakeML Files (*.qml *.QML);;All Files (*.*)'))
        if file:
            self.url_edit.setPlainText(QUrl.fromLocalFile(file).toString())

    def output_type(self) -> str:
        """
        Returns the output table type
        """
        return Fetcher.EXTENDED

    def convert_negative_depths(self) -> bool:
        """
        Returns True if negative depths must be converted
        """
        return self.output_options_widget.convert_negative_depths()

    def depth_unit(self) -> QgsUnitTypes.DistanceUnit:
        """
        Returns the current depth unit
        """
        return self.output_options_widget.depth_unit()

    def url(self) -> str:
        """
        Returns the current URL
        """
        return self.url_edit.toPlainText().strip()
