# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QQuakeDialog
                                 A QGIS plugin
 QQuake plugin to download seismologic data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Faunalia
        email                : matteo.ghetta@faunalia.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import (
    QDialogButtonBox,
    QDialog
)

from qgis.core import (
    QgsFeature,
    QgsGeometry,
    QgsPointXY,
    QgsProject,
    QgsRectangle,
    QgsCoordinateReferenceSystem
)

from qquake.qquake_defs import (
    fdsn_events_capabilities,
    MAX_LON_LAT
)

from qquake.fetcher import Fetcher

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qquake_dialog_base.ui'))


class QQuakeDialog(QDialog, FORM_CLASS):

    def __init__(self, iface, parent=None):
        """Constructor."""
        super().__init__(parent)

        self.setupUi(self)

        self.url_text_browser.viewport().setAutoFillBackground(False)
        self.button_box.button(QDialogButtonBox.Ok).setText(self.tr('Fetch Data'))

        self.iface = iface

        # QgsExtentGroupBox utilities to se tup in the init
        self.mExtentGroupBox.setMapCanvas(self.iface.mapCanvas())
        self.mExtentGroupBox.setCurrentExtent(self.iface.mapCanvas().extent(),
                                              self.iface.mapCanvas().mapSettings().destinationCrs())
        self.mExtentGroupBox.setOriginalExtent(QgsRectangle(*MAX_LON_LAT), QgsCoordinateReferenceSystem('EPSG:4326'))
        self.mExtentGroupBox.setOutputCrs(QgsCoordinateReferenceSystem('EPSG:4326'))

        # connect the date changing to the refreshing function
        self.fdsn_event_start_date.dateChanged.connect(self._refresh_date)

        # fill the FDSN combobox with the dictionary keys
        self.fdsn_event_ws_combobox.addItems(fdsn_events_capabilities.keys())

        # connect to refreshing function to refresh the UI depending on the WS
        self.refreshWidgets()

        # change the UI parameter according to the web service chosen
        self.fdsn_event_ws_combobox.currentIndexChanged.connect(self.refreshWidgets)

        self.fdsn_event_ws_combobox.currentIndexChanged.connect(self._refresh_url)
        self.fdsn_event_start_date.dateChanged.connect(self._refresh_url)
        self.fdsn_event_end_date.dateChanged.connect(self._refresh_url)
        self.fdsn_event_min_magnitude.valueChanged.connect(self._refresh_url)
        self.fdsn_event_max_magnitude.valueChanged.connect(self._refresh_url)
        self.mExtentGroupBox.extentChanged.connect(self._refresh_url)
        self.mExtentGroupBox.toggled.connect(self._refresh_url)

        self.button_box.accepted.connect(self._getEventList)

        self.fetcher = None

        self._refresh_url()

    def _refresh_date(self):
        """
        Avoids negative date intervals by checking start_date > end_date
        """
        if self.fdsn_event_start_date.dateTime() > self.fdsn_event_end_date.dateTime():
            self.fdsn_event_end_date.setDate(self.fdsn_event_start_date.date())

    def get_fetcher(self):
        """
        Returns a quake fetcher corresponding to the current dialog settings
        """
        return Fetcher(event_service=self.fdsn_event_ws_combobox.currentText(),
                       event_start_date=self.fdsn_event_start_date.dateTime(),
                       event_end_date=self.fdsn_event_end_date.dateTime(),
                       event_min_magnitude=self.fdsn_event_min_magnitude.value(),
                       event_max_magnitude=self.fdsn_event_max_magnitude.value(),
                       extent=self.mExtentGroupBox.outputExtent() if self.mExtentGroupBox.isChecked() else None)

    def _refresh_url(self):
        fetcher = self.get_fetcher()
        self.url_text_browser.setText('<a href="{0}">{0}</a>'.format(fetcher.generate_url()))

    def refreshWidgets(self):
        """
        Refreshing the FDSN-Event UI depending on the WS chosen
        """

        # set DateTime Widget START according to the combobox choice
        self.fdsn_event_start_date.setMinimumDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['mindate']
        )
        self.fdsn_event_start_date.setMaximumDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['maxdate']
        )
        self.fdsn_event_start_date.setDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['defaultdate']
        )

        # set DateTime Widget END according to the combobox choice
        self.fdsn_event_end_date.setMinimumDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['mindate']
        )
        self.fdsn_event_end_date.setMaximumDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['maxdate']
        )
        # just make a week difference from START date
        self.fdsn_event_end_date.setDate(
            fdsn_events_capabilities[self.fdsn_event_ws_combobox.currentText()]['defaultdate'].addDays(-7)
        )

    def _getEventList(self):
        """
        read the event URL and convert the response in a list
        """
        if self.fetcher:
            # TODO - cancel current request
            return

        self.fetcher = self.get_fetcher()
        self.fetcher.progress.connect(self.progressBar.setValue)
        self.fetcher.finished.connect(self._fetcher_finished)
        self.button_box.button(QDialogButtonBox.Ok).setText(self.tr('Fetching'))
        self.button_box.button(QDialogButtonBox.Ok).setEnabled(False)

        self.fetcher.fetch_data()

    def _fetcher_finished(self):
        self.button_box.button(QDialogButtonBox.Ok).setText(self.tr('Fetch Data'))
        self.button_box.button(QDialogButtonBox.Ok).setEnabled(True)

        vl = self.fetcher.create_empty_layer()

        self.fetcher.deleteLater()
        self.fetcher = None

       # # write QgsFeatures of the FDSN Events
       #lid = []
       #for i in list(zip(*fdsn_event_dict.values())):
       #    lid.append('{}eventid={}&includeallorigins=true&includeallmagnitudes=true&format=xml'.format(
       #        cap,
       #        i[0])
       #    )
       #    feat = QgsFeature(vl.fields())
       #    feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(i[3]), float(i[2]))))
       #    feat.setAttributes(list(i))
       #    vl.dataProvider().addFeatures([feat])

        # add the layer to the map
        QgsProject.instance().addMapLayer(vl)

